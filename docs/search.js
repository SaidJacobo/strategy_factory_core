window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "app.backbone", "modulename": "app.backbone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.database", "modulename": "app.backbone.database", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.database.db", "modulename": "app.backbone.database.db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.database.db.DATABASE_URL", "modulename": "app.backbone.database.db", "qualname": "DATABASE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sqlite:///strategyfactory.db&#x27;"}, {"fullname": "app.backbone.database.db.engine", "modulename": "app.backbone.database.db", "qualname": "engine", "kind": "variable", "doc": "<p></p>\n", "default_value": "Engine(sqlite:///strategyfactory.db)"}, {"fullname": "app.backbone.database.db.Base", "modulename": "app.backbone.database.db", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.database.db.Base.__init__", "modulename": "app.backbone.database.db", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "app.backbone.database.db.Base.registry", "modulename": "app.backbone.database.db", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.orm.decl_api.registry", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "app.backbone.database.db.Base.metadata", "modulename": "app.backbone.database.db", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData", "default_value": "MetaData()"}, {"fullname": "app.backbone.database.db.SessionLocal", "modulename": "app.backbone.database.db", "qualname": "SessionLocal", "kind": "variable", "doc": "<p></p>\n", "default_value": "sessionmaker(class_=&#x27;Session&#x27;, autocommit=False, bind=Engine(sqlite:///strategyfactory.db), autoflush=False, expire_on_commit=True)"}, {"fullname": "app.backbone.database.db.get_db", "modulename": "app.backbone.database.db", "qualname": "get_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service", "modulename": "app.backbone.database.db_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.database.db_service.DbService", "modulename": "app.backbone.database.db_service", "qualname": "DbService", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.database.db_service.DbService.get_by_id", "modulename": "app.backbone.database.db_service", "qualname": "DbService.get_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.get_by_filter", "modulename": "app.backbone.database.db_service", "qualname": "DbService.get_by_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">filters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.get_many_by_filter", "modulename": "app.backbone.database.db_service", "qualname": "DbService.get_many_by_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">filters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.delete_many_by_filter", "modulename": "app.backbone.database.db_service", "qualname": "DbService.delete_many_by_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">filters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.get_all", "modulename": "app.backbone.database.db_service", "qualname": "DbService.get_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.create", "modulename": "app.backbone.database.db_service", "qualname": "DbService.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">obj_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.create_all", "modulename": "app.backbone.database.db_service", "qualname": "DbService.create_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.update", "modulename": "app.backbone.database.db_service", "qualname": "DbService.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">obj_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.delete", "modulename": "app.backbone.database.db_service", "qualname": "DbService.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">sqltypes</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.delete_all", "modulename": "app.backbone.database.db_service", "qualname": "DbService.delete_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.save", "modulename": "app.backbone.database.db_service", "qualname": "DbService.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.database.db_service.DbService.get_database", "modulename": "app.backbone.database.db_service", "qualname": "DbService.get_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.entities", "modulename": "app.backbone.entities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.Base", "modulename": "app.backbone.entities", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.Base.__init__", "modulename": "app.backbone.entities", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "app.backbone.entities.Base.registry", "modulename": "app.backbone.entities", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.orm.decl_api.registry", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "app.backbone.entities.Base.metadata", "modulename": "app.backbone.entities", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData", "default_value": "MetaData()"}, {"fullname": "app.backbone.entities.bot", "modulename": "app.backbone.entities.bot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot", "modulename": "app.backbone.entities.bot", "qualname": "Bot", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot.Bot.__init__", "modulename": "app.backbone.entities.bot", "qualname": "Bot.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot.Bot.Id", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.StrategyId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.StrategyId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.TickerId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.TickerId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.TimeframeId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.TimeframeId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Name", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Risk", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Risk", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Strategy", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Strategy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Ticker", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Ticker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Timeframe", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Timeframe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.BotPerformance", "modulename": "app.backbone.entities.bot", "qualname": "Bot.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance", "modulename": "app.backbone.entities.bot_performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.__init__", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Id", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.BotId", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.BotId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.DateFrom", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.DateFrom", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.DateTo", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.DateTo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Method", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.StabilityRatio", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.StabilityRatio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Trades", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Trades", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Return", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Return", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Drawdown", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Drawdown", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.RreturnDd", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.RreturnDd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.StabilityWeightedRar", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.StabilityWeightedRar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.WinRate", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.WinRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Duration", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Favorite", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Favorite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.InitialCash", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.InitialCash", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.ExposureTime", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.ExposureTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.KellyCriterion", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.KellyCriterion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.WinratePValue", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.WinratePValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.SharpeRatio", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.SharpeRatio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.JarqueBeraStat", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.JarqueBeraStat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.JarqueBeraPValue", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.JarqueBeraPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Skew", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Skew", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Kurtosis", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Kurtosis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Bot", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.BotTradePerformance", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.BotTradePerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.TradeHistory", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.TradeHistory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.MontecarloTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.MontecarloTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.LuckTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.LuckTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.RandomTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.RandomTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance", "modulename": "app.backbone.entities.bot_trade_performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.__init__", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.Id", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.BotPerformanceId", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanWinningReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanWinningReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdWinningReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdWinningReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanLosingReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanLosingReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdLosingReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdLosingReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanTradeDuration", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanTradeDuration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdTradeDuration", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdTradeDuration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongWinrate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongWinrate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinLongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinLongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinLongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinLongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseLongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseLongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseLongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseLongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortWinrate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortWinrate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ProfitFactor", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ProfitFactor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinRate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ConsecutiveWins", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ConsecutiveWins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ConsecutiveLosses", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ConsecutiveLosses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongCount", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortCount", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.BotPerformance", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category", "modulename": "app.backbone.entities.category", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category", "modulename": "app.backbone.entities.category", "qualname": "Category", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.category.Category.__init__", "modulename": "app.backbone.entities.category", "qualname": "Category.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.category.Category.Id", "modulename": "app.backbone.entities.category", "qualname": "Category.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Name", "modulename": "app.backbone.entities.category", "qualname": "Category.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Commission", "modulename": "app.backbone.entities.category", "qualname": "Category.Commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Tickers", "modulename": "app.backbone.entities.category", "qualname": "Category.Tickers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config", "modulename": "app.backbone.entities.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config", "modulename": "app.backbone.entities.config", "qualname": "Config", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.config.Config.__init__", "modulename": "app.backbone.entities.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.config.Config.Id", "modulename": "app.backbone.entities.config", "qualname": "Config.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config.Name", "modulename": "app.backbone.entities.config", "qualname": "Config.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config.Value", "modulename": "app.backbone.entities.config", "qualname": "Config.Value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test", "modulename": "app.backbone.entities.luck_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.__init__", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.Id", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.BotPerformanceId", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.LuckTestPerformanceId", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.LuckTestPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.TradesPercentToRemove", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.TradesPercentToRemove", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.BotPerformance", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.LuckTestPerformance", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.LuckTestPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse", "modulename": "app.backbone.entities.metric_wharehouse", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.__init__", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Id", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.MontecarloTestId", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.MontecarloTestId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Method", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Metric", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.ColumnName", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.ColumnName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Value", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.MontecarloTest", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.MontecarloTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test", "modulename": "app.backbone.entities.montecarlo_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.__init__", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Id", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.BotPerformanceId", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Simulations", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Simulations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.ThresholdRuin", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.ThresholdRuin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.BotPerformance", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Metrics", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Metrics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test", "modulename": "app.backbone.entities.random_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.random_test.RandomTest.__init__", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.random_test.RandomTest.Id", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.BotPerformanceId", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.RandomTestPerformanceId", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.RandomTestPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.Iterations", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.Iterations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinratePValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinratePValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.BotPerformance", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.RandomTestPerformance", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.RandomTestPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy", "modulename": "app.backbone.entities.strategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.strategy.Strategy.__init__", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.strategy.Strategy.Id", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Name", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Description", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Description", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.MetaTraderName", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.MetaTraderName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Bot", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker", "modulename": "app.backbone.entities.ticker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.ticker.Ticker.__init__", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.ticker.Ticker.Id", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.CategoryId", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.CategoryId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Name", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Spread", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Spread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Category", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Category", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Bot", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe", "modulename": "app.backbone.entities.timeframe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.__init__", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Id", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Name", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.MetaTraderNumber", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.MetaTraderNumber", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Selected", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Selected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Bot", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade", "modulename": "app.backbone.entities.trade", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade", "modulename": "app.backbone.entities.trade", "qualname": "Trade", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.trade.Trade.__init__", "modulename": "app.backbone.entities.trade", "qualname": "Trade.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.trade.Trade.Id", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.BotPerformanceId", "modulename": "app.backbone.entities.trade", "qualname": "Trade.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Size", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryBar", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryBar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitBar", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitBar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryPrice", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryPrice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitPrice", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitPrice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.SL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.SL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TP", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Tag", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Tag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.PnL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.PnL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.NetPnL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.NetPnL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Commission", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ReturnPct", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryTime", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitTime", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Duration", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Equity", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Equity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TopBest", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TopBest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TopWorst", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TopWorst", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryConversionRate", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryConversionRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitConversionRate", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitConversionRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.BotPerformance", "modulename": "app.backbone.entities.trade", "qualname": "Trade.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services", "modulename": "app.backbone.services", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.backtest_service", "modulename": "app.backbone.services.backtest_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.backtest_service.log_message", "modulename": "app.backbone.services.backtest_service", "qualname": "log_message", "kind": "function", "doc": "<p>Funci\u00f3n para agregar logs a la cola sin detener el proceso.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">status</span>,</span><span class=\"param\">\t<span class=\"n\">message</span>,</span><span class=\"param\">\t<span class=\"n\">error</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService", "kind": "class", "doc": "<p>Handles the orchestration, execution, persistence, and retrieval of backtests and related performance metrics.</p>\n\n<p>This service acts as the central component for running backtests on trading strategies, saving their results,\nand performing various queries on historical performance data. It supports streaming logs, asynchronous execution,\nand interaction with the database and configuration layers.</p>\n\n<p>Main features include:</p>\n\n<ul>\n<li>Running and saving individual or batch backtests across strategy/ticker/timeframe/risk combinations.</li>\n<li>Loading strategies dynamically and executing them with proper capital, leverage, and configuration.</li>\n<li>Persisting detailed performance metrics and trade history in the database.</li>\n<li>Performing deletions and cleanup of historical test data (including files and DB records).</li>\n<li>Providing filtering, querying, and tagging of backtests (e.g. by performance, robustness, favorites).</li>\n<li>Identifying robust strategies via custom metrics and filters (e.g. return/drawdown ratio &gt; 1).</li>\n<li>Managing test dependencies such as Monte Carlo, Luck Test, and Random Test results.</li>\n</ul>\n\n<p>Attributes:\n    db_service (DbService): Handles database connections and CRUD operations.\n    bot_service (BotService): Manages bot records used during backtesting.\n    config_service (ConfigService): Provides access to configuration values (e.g. risk-free rate).</p>\n\n<p>Notes:\n    - Backtests can be persisted with reports or run temporarily.\n    - Streaming logs (via queues) allow real-time feedback when executing long-running backtests.\n    - This class assumes a full application context with all entities (Bot, BotPerformance, Trade, etc.) properly defined.</p>\n"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.db_service", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.bot_service", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.bot_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.config_service", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.config_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.async_iterator", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.async_iterator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.run_backtest", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.run_backtest", "kind": "function", "doc": "<p>Executes an asynchronous backtest for a given trading strategy and returns performance metrics, \ntrade details, and statistics via a streaming endpoint.</p>\n\n<p>This function loads the specified strategy, fetches historical price data, applies leverage rules,\nand runs a backtest simulation. Results are streamed in real-time through an asyncio queue, \nand optional plots/reports are generated.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Loads the trading strategy dynamically from a module path.</li>\n<li>Retrieves leverage rules from a YAML config file.</li>\n<li>Fetches and prepares historical price data for the given ticker/timeframe.</li>\n<li>Computes margin requirements based on leverage.</li>\n<li>Executes the backtest using the strategy's logic and calculates performance metrics.</li>\n<li>Generates and saves backtest plots (temporary or persistent) if requested.</li>\n<li>Streams progress updates, logs, and final results through the provided queue.</li>\n</ul>\n\n<p>Parameters:</p>\n\n<ul>\n<li>initial_cash (float): Starting capital for the backtest simulation.</li>\n<li>strategy (Strategy): Strategy object containing the module path and name.</li>\n<li>ticker (Ticker): Financial instrument to backtest on (e.g., currency pair, stock).</li>\n<li>timeframe (Timeframe): Timeframe for price data (e.g., '1H', '4H').</li>\n<li>date_from (pd.Timestamp): Start date for historical data.</li>\n<li>date_to (pd.Timestamp): End date for historical data.</li>\n<li>method (str): Reserved for future backtest variations (unused in current implementation).</li>\n<li>risk (float): Risk percentage per trade (e.g., 0.01 for 1% risk).</li>\n<li>save_bt_plot (str): Plot saving mode: \n<ul>\n<li>'temp': Saves in a temporary directory (auto-cleaned later).</li>\n<li>'persist': Saves in the main backtest_plots directory.</li>\n<li>Any other value skips plot generation.</li>\n</ul></li>\n<li>queue (asyncio.Queue): Async queue for real-time progress streaming.</li>\n</ul>\n\n<p>Returns:\nAsyncGenerator[str, None]: Yields three objects upon completion:</p>\n\n<ul>\n<li>performance (pd.DataFrame): Aggregated strategy performance metrics.</li>\n<li>trade_performance (pd.DataFrame): Detailed trade-by-trade results.</li>\n<li>stats (pd.DataFrame): Statistical summaries (e.g., Sharpe ratio, max drawdown).</li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Reads leverage configurations from './app/configs/leverages.yml'.</li>\n<li>May create HTML plot files in either './app/templates/static/backtest_plots/temp' (temporary)\nor './app/templates/static/backtest_plots' (persistent).</li>\n<li>Streams logs/results via the provided asyncio.Queue (e.g., for frontend progress updates).</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>The strategy module path must follow the convention: 'app.backbone.strategies.{strategy_name}'.</li>\n<li>Temporary plots include a timestamp and are automatically purged by a separate cleanup process.</li>\n<li>Risk-free rate is fetched from the application's config service (used for Sharpe ratio calculations).</li>\n<li>Margin is calculated as 1/leverage (e.g., 50x leverage \u2192 2% margin requirement).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">strategy</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">save_bt_plot</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncGenerator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.run_backtests_and_save", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.run_backtests_and_save", "kind": "function", "doc": "<p>Executes multiple backtests in parallel for all combinations of strategies, tickers, timeframes and risks,\nthen saves results to the database while streaming progress updates.</p>\n\n<p>This function handles the complete backtesting pipeline:</p>\n\n<ul>\n<li>Generates all possible combinations of input parameters</li>\n<li>Checks for existing backtest results to avoid duplicate work</li>\n<li>Runs new backtests when needed using run_backtest()</li>\n<li>Saves performance metrics, trade details, and statistics to the database</li>\n<li>Provides real-time feedback through an async queue</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Normalizes all input parameters to lists (single items \u2192 single-element lists)</li>\n<li>Generates all combinations of strategies/tickers/timeframes/risks</li>\n<li>For each combination:</li>\n</ol>\n\n<ul>\n<li>Checks if bot exists in database</li>\n<li>Verifies if backtest already exists for the date range</li>\n<li>Runs new backtest if needed</li>\n<li>Converts results to database objects</li>\n<li>Saves all data (bot, performance, trades) transactionally</li>\n</ul>\n\n<ol start=\"4\">\n<li>Streams progress, warnings, and completion messages via queue</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>initial_cash (float): Starting capital for all backtests</li>\n<li>strategies (Strategy|List[Strategy]): Single strategy or list to test</li>\n<li>tickers (Ticker|List[Ticker]): Financial instrument(s) to backtest</li>\n<li>timeframes (List[Timeframe]): Time intervals to test (e.g. ['1H', '4H'])</li>\n<li>date_from (date): Start date for historical data</li>\n<li>date_to (date): End date for historical data</li>\n<li>method (str): Backtesting methodology identifier</li>\n<li>risks (float|List[float]): Risk percentage(s) per trade (e.g. [0.01, 0.02])</li>\n<li>save_bt_plot (str): Plot saving mode:\n<ul>\n<li>'temp': Temporary storage</li>\n<li>'persist': Permanent storage</li>\n<li>Other: Skip plot generation</li>\n</ul></li>\n<li>queue (asyncio.Queue): Async queue for progress streaming</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>AsyncGenerator[str, None]: Yields list of saved BotPerformance objects when complete</li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Creates/updates database records for:\n<ul>\n<li>Bot configurations</li>\n<li>Performance metrics</li>\n<li>Individual trades</li>\n</ul></li>\n<li>May generate plot files depending on save_bt_plot parameter</li>\n<li>Streams messages to provided queue including:\n<ul>\n<li>Progress logs</li>\n<li>Warnings about duplicates</li>\n<li>Completion/failure notifications</li>\n</ul></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Automatically skips existing backtests for the same parameters/date range</li>\n<li>Uses atomic database transactions to ensure data consistency</li>\n<li>New bots are created if they don't exist in the database</li>\n<li>Trade history is extracted from backtest stats and saved relationally</li>\n<li>All database operations use the service's db_service interface</li>\n<li>Failures for individual combinations don't stop overall execution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">strategies</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">tickers</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">timeframes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">risks</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">save_bt_plot</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncGenerator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_performances_by_strategy_ticker", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_performances_by_strategy_ticker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span>,</span><span class=\"param\">\t<span class=\"n\">ticker_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_performances_by_bot_dates", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_performances_by_bot_dates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_id</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_performance_by_bot", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_performance_by_bot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_bot_performance_by_id", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_bot_performance_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.delete_from_strategy", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.delete_from_strategy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.delete", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.update_favorite", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.update_favorite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">performance_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_robusts", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_robusts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_robusts_by_strategy_id", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_robusts_by_strategy_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_favorites", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_favorites", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_trades", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_trades", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot_performance_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">Trade</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.backtest_service.BacktestService.get_by_filter", "modulename": "app.backbone.services.backtest_service", "qualname": "BacktestService.get_by_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">return_</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drawdown</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stability_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sharpe_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trades</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rreturn_dd</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">winrate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.bot_service", "modulename": "app.backbone.services.bot_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.bot_service.BotService", "modulename": "app.backbone.services.bot_service", "qualname": "BotService", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.bot_service.BotService.db_service", "modulename": "app.backbone.services.bot_service", "qualname": "BotService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.bot_service.BotService.get_bots_by_strategy", "modulename": "app.backbone.services.bot_service", "qualname": "BotService.get_bots_by_strategy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">strategy_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.bot_service.BotService.get_bot", "modulename": "app.backbone.services.bot_service", "qualname": "BotService.get_bot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span>,</span><span class=\"param\">\t<span class=\"n\">ticker_id</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe_id</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.bot_service.BotService.get_all_bots", "modulename": "app.backbone.services.bot_service", "qualname": "BotService.get_all_bots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.bot_service.BotService.get_bot_by_id", "modulename": "app.backbone.services.bot_service", "qualname": "BotService.get_bot_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.config_service", "modulename": "app.backbone.services.config_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.config_service.ConfigService", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.config_service.ConfigService.db_service", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.config_service.ConfigService.get_all", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService.get_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.config_service.ConfigService.get_by_name", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService.get_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.config_service.ConfigService.add_or_update", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService.add_or_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.config_service.ConfigService.load_default_values", "modulename": "app.backbone.services.config_service", "qualname": "ConfigService.load_default_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.operation_result", "modulename": "app.backbone.services.operation_result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.operation_result.OperationResult", "modulename": "app.backbone.services.operation_result", "qualname": "OperationResult", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.operation_result.OperationResult.__init__", "modulename": "app.backbone.services.operation_result", "qualname": "OperationResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ok</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span>)</span>"}, {"fullname": "app.backbone.services.operation_result.OperationResult.ok", "modulename": "app.backbone.services.operation_result", "qualname": "OperationResult.ok", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.operation_result.OperationResult.message", "modulename": "app.backbone.services.operation_result", "qualname": "OperationResult.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.operation_result.OperationResult.item", "modulename": "app.backbone.services.operation_result", "qualname": "OperationResult.item", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service", "modulename": "app.backbone.services.strategy_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service.StrategyService", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.db_service", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.backtest_service", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.backtest_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.bot_service", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.bot_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.create", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">metatrader_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.get_all", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.get_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.delete", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.get_by_id", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.get_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.update", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">metatrader_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.strategy_service.StrategyService.get_used_strategies", "modulename": "app.backbone.services.strategy_service", "qualname": "StrategyService.get_used_strategies", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service", "modulename": "app.backbone.services.test_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.test_service.TestService", "modulename": "app.backbone.services.test_service", "qualname": "TestService", "kind": "class", "doc": "<p>Provides a collection of statistical and robustness tests for evaluating trading bot performance.</p>\n\n<p>This service encapsulates methods that assess the quality, reliability, and randomness of \na strategy's results by applying various statistical analyses such as:</p>\n\n<ul>\n<li>t-tests for Sharpe ratio significance</li>\n<li>correlation tests between bot returns and the underlying asset</li>\n<li>randomization tests against synthetic strategies</li>\n<li>luck-based filtering of extreme trades</li>\n<li>Monte Carlo simulations to evaluate ruin probabilities</li>\n</ul>\n\n<p>Attributes:\n    db_service (DbService): Handles database interactions and persistence.\n    backtest_service (BacktestService): Retrieves historical bot performance and trade data.\n    config_service (ConfigService): Provides access to application-wide configuration values (e.g., risk-free rate).</p>\n\n<p>Notes:\n    - This class is intended to be used as a backend utility for validating trading bot robustness.\n    - Each test method typically returns an <code>OperationResult</code> and may generate visualizations or database entries.</p>\n"}, {"fullname": "app.backbone.services.test_service.TestService.db_service", "modulename": "app.backbone.services.test_service", "qualname": "TestService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.test_service.TestService.backtest_service", "modulename": "app.backbone.services.test_service", "qualname": "TestService.backtest_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.test_service.TestService.config_service", "modulename": "app.backbone.services.test_service", "qualname": "TestService.config_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.test_service.TestService.run_montecarlo_test", "modulename": "app.backbone.services.test_service", "qualname": "TestService.run_montecarlo_test", "kind": "function", "doc": "<p>Performs a Monte Carlo simulation to assess the probabilistic risk profile of a bot's equity curve.</p>\n\n<p>This test runs multiple randomized simulations of the bot\u2019s historical trade sequence to estimate \nthe potential distribution of future outcomes. It focuses on downside risk by evaluating the \nlikelihood of reaching a \"ruin\" threshold and analyzing performance percentiles.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Loads the bot's historical trade and equity data.</li>\n<li>Runs <code>n_simulations</code> Monte Carlo paths using the historical trade returns.</li>\n<li>Calculates key percentile statistics (e.g., 5th, 10th, median, 90th, 95th) over all simulations.</li>\n<li>Evaluates whether the equity would fall below the specified <code>threshold_ruin</code>.</li>\n<li>Stores the test metadata and resulting metrics in the database.</li>\n</ul>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.\n    n_simulations (int): Number of Monte Carlo simulations to run.\n    threshold_ruin (float): Capital threshold considered as \"ruin\" (e.g., 0.3 = 30% of initial capital).</p>\n\n<p>Returns:\n    OperationResult: Indicates success and contains a list of <code>MetricWharehouse</code> entries \n    with computed statistics.</p>\n\n<p>Side effects:\n    - Saves a <code>MontecarloTest</code> entity in the database linked to the given performance.\n    - Stores all percentile results and associated metadata in the <code>MetricWharehouse</code> table.</p>\n\n<p>Notes:\n    - This test provides a probabilistic view of strategy robustness under randomness and path dependency.\n    - Useful for risk management, especially when assessing worst-case scenarios or capital preservation.\n    - The simulation respects the statistical properties of the original trade distribution (returns and durations).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_simulations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ruin</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service.TestService.run_luck_test", "modulename": "app.backbone.services.test_service", "qualname": "TestService.run_luck_test", "kind": "function", "doc": "<p>Performs a \"luck test\" to evaluate the robustness of a bot's performance by removing extreme trades.</p>\n\n<p>This method simulates the impact of luck by discarding a percentage of the bot's best and worst trades,\nthen recalculating performance metrics based on the remaining data. The goal is to estimate how much\nof the bot's performance depends on a few outliers.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Loads the bot's trade history and determines how many trades to remove based on the given percentage.</li>\n<li>Identifies the top <code>X%</code> best and worst trades by return percentage.</li>\n<li>Filters out these trades and rebuilds the equity curve from the remaining ones.</li>\n<li>Calculates new performance metrics: return, drawdown, return/drawdown ratio, winrate, and a custom metric.</li>\n<li>Fits a linear regression to the equity curve to compute a stability ratio.</li>\n<li>Creates a new <code>BotPerformance</code> object based on the filtered trades.</li>\n<li>Stores all results, including which trades were marked as \"lucky\" (best or worst), in the database.</li>\n<li>Triggers the generation of a Plotly chart to visualize the filtered performance.</li>\n</ul>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.\n    trades_percent_to_remove (float): Percentage of top and bottom trades (by return) to remove for the test.</p>\n\n<p>Returns:\n    OperationResult: An object indicating success and containing the resulting <code>LuckTest</code> record.</p>\n\n<p>Side effects:\n    - Updates the trade records in the database to flag trades as top-best or top-worst.\n    - Saves a new <code>LuckTest</code> and <code>BotPerformance</code> entry reflecting the filtered results.\n    - Generates and stores a visualization of the adjusted performance.</p>\n\n<p>Notes:\n    - This test helps detect whether a bot's profitability is overly dependent on a few outlier trades.\n    - The stability ratio is derived from the R\u00b2 of a linear regression on the filtered equity curve.\n    - The custom metric is a weighted risk-adjusted return penalized by drawdown and enhanced by stability.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span>,</span><span class=\"param\">\t<span class=\"n\">trades_percent_to_remove</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service.TestService.get_luck_test_equity_curve", "modulename": "app.backbone.services.test_service", "qualname": "TestService.get_luck_test_equity_curve", "kind": "function", "doc": "<p>Generates a filtered equity curve by removing lucky trades from a bot's historical performance.</p>\n\n<p>This method rebuilds the bot's equity curve after excluding trades flagged as either top-performing \n(\"TopBest\"), worst-performing (\"TopWorst\"), or both, depending on the configuration.</p>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.\n    remove_only_good_luck (bool): If True, only the top-performing trades (\"TopBest\") are removed.\n                                If False, both \"TopBest\" and \"TopWorst\" trades are removed.</p>\n\n<p>Returns:\n    OperationResult: Contains the filtered equity curve as a DataFrame with <code>ExitTime</code> and <code>Equity</code>.</p>\n\n<p>Notes:\n    - This function is typically used to assess the strategy's robustness by simulating less favorable luck.\n    - Equity is recomputed using cumulative product of filtered returns.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span>,</span><span class=\"param\">\t<span class=\"n\">remove_only_good_luck</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service.TestService.run_random_test", "modulename": "app.backbone.services.test_service", "qualname": "TestService.run_random_test", "kind": "function", "doc": "<p>Performs a Monte Carlo randomization test to evaluate the statistical significance of a bot's performance.</p>\n\n<p>This method compares the real bot's performance metrics to those obtained from multiple randomized simulations\nthat mimic the bot's trade frequency, duration, and direction probabilities. The goal is to assess whether \nthe bot\u2019s performance could have occurred by chance.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Loads bot performance data, price history, and equity curve.</li>\n<li>Extracts empirical trading behavior (probabilities, duration statistics).</li>\n<li>Runs a set of randomized backtests using a custom \"RandomTrader\" strategy to simulate noise-based trades.</li>\n<li>Bootstraps real and random returns <code>n_iterations</code> times and computes key performance metrics.</li>\n<li>For each metric (return, drawdown, return/DD, winrate), calculates:\n<ul>\n<li>Mean and standard deviation differences</li>\n<li>Z-scores</li>\n<li>One-sided p-values (probability that the real strategy performs worse or equal to the random one).</li>\n</ul></li>\n<li>Stores the statistical results in the database.</li>\n</ul>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.\n    n_iterations (int): Number of bootstrap iterations to compare real vs. random performance.</p>\n\n<p>Returns:\n    OperationResult: An object indicating success. Results are saved to the database.</p>\n\n<p>Side effects:\n    - Runs multiple randomized backtests using the bot's historical market data.\n    - Saves statistical results in a <code>RandomTest</code> table (via <code>self.db_service</code>).</p>\n\n<p>Notes:\n    - This test evaluates whether the strategy adds value beyond what could be expected by random chance.\n    - Performance metrics compared: total return, max drawdown, return-to-drawdown ratio, and winrate.\n    - Assumes the presence of a random strategy class at <code>'app.backbone.strategies.random_trader.RandomTrader'</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service.TestService.run_correlation_test", "modulename": "app.backbone.services.test_service", "qualname": "TestService.run_correlation_test", "kind": "function", "doc": "<p>Performs a correlation analysis between a bot's monthly returns and the underlying asset's price variation.</p>\n\n<p>This method calculates the monthly percentage changes in the bot's equity curve and compares them to\nthe monthly price changes of the underlying instrument. It evaluates both the Pearson correlation \ncoefficient and the coefficient of determination (R\u00b2) via linear regression.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Retrieves the bot's equity curve and historical price data for the configured ticker and timeframe.</li>\n<li>Aggregates both series to monthly frequency and computes percentage variations.</li>\n<li>Aligns and fills missing months to ensure matching time indices.</li>\n<li>Fits a linear regression model between asset price changes and bot returns.</li>\n<li>Computes Pearson's correlation coefficient and R\u00b2 score.</li>\n<li>Generates a Plotly scatter plot with a fitted regression line.</li>\n<li>Annotates the plot with the correlation and determination values.</li>\n<li>Saves the plot as a JSON file for rendering.</li>\n</ul>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.</p>\n\n<p>Returns:\n    OperationResult: An object indicating success and containing a DataFrame with:\n        - <code>correlation</code>: Pearson correlation coefficient (r)\n        - <code>determination</code>: Coefficient of determination (R\u00b2)</p>\n\n<p>Side effects:\n    Saves a Plotly chart as an HTML-ready JSON file in the <code>./app/templates/static/correlation_plots</code> directory.\n    The filename includes the bot's name and performance date range.</p>\n\n<p>Notes:\n    - This analysis helps identify the degree to which the bot's performance is correlated with the underlying asset.\n    - Monthly data is used to smooth out noise and capture general trends.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot_performance_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.test_service.TestService.run_t_test", "modulename": "app.backbone.services.test_service", "qualname": "TestService.run_t_test", "kind": "function", "doc": "<p>Performs a rolling Sharpe Ratio analysis with confidence intervals for a given bot's performance.</p>\n\n<p>This method calculates the monthly returns of the bot based on its equity curve and evaluates\nthe statistical stability of its risk-adjusted performance over time.</p>\n\n<p>Steps performed:</p>\n\n<ul>\n<li>Extracts the bot's equity history and computes monthly returns.</li>\n<li>Tests for normality using the Shapiro-Wilk test.</li>\n<li>Computes the cumulative Sharpe Ratio month-by-month.</li>\n<li>Builds 95% confidence intervals using either:\n<ul>\n<li>Bootstrapping (if returns are not normally distributed), or</li>\n<li>Theoretical t-distribution (if returns are normal).</li>\n</ul></li>\n<li>Renders an interactive Plotly chart with the Sharpe Ratio curve and confidence bands.</li>\n<li>Annotates the Shapiro-Wilk p-value and saves the chart as a JSON file.</li>\n</ul>\n\n<p>Parameters:\n    bot_performance_id (int): The ID of the bot performance record to analyze.</p>\n\n<p>Returns:\n    OperationResult: A success indicator and optional message or payload.</p>\n\n<p>Side effects:\n    Saves a Plotly chart as an HTML-ready JSON file in the <code>./app/templates/static/t_test_plots</code> directory.\n    The filename includes the bot's name and performance date range.</p>\n\n<p>Notes:\n    - The risk-free rate is retrieved from the configuration under the key \"RiskFreeRate\".\n    - The Sharpe Ratio is annualized assuming 12 periods (monthly data).\n    - The analysis starts from the second available month (since returns require two data points).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot_performance_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service", "modulename": "app.backbone.services.ticker_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.ticker_service.TIMEFRAMES", "modulename": "app.backbone.services.ticker_service", "qualname": "TIMEFRAMES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;M1&#x27;: 1, &#x27;M2&#x27;: 2, &#x27;M3&#x27;: 3, &#x27;M4&#x27;: 4, &#x27;M5&#x27;: 5, &#x27;M6&#x27;: 6, &#x27;M10&#x27;: 10, &#x27;M12&#x27;: 12, &#x27;M15&#x27;: 15, &#x27;M20&#x27;: 20, &#x27;M30&#x27;: 30, &#x27;H1&#x27;: 16385, &#x27;H2&#x27;: 16386, &#x27;H3&#x27;: 16387, &#x27;H4&#x27;: 16388, &#x27;H6&#x27;: 16390, &#x27;H8&#x27;: 16392, &#x27;H12&#x27;: 16396, &#x27;D1&#x27;: 16408, &#x27;W1&#x27;: 32769, &#x27;MN1&#x27;: 49153}"}, {"fullname": "app.backbone.services.ticker_service.TickerService", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.ticker_service.TickerService.db_service", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.ticker_service.TickerService.create_update_timeframes", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.create_update_timeframes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.update_timeframe", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.update_timeframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">selected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.create", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_tickers_by_category", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_tickers_by_category", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_by_name", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_all_categories", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_all_categories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">category</span><span class=\"o\">.</span><span class=\"n\">Category</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_ticker_by_id", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_ticker_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_all_timeframes", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_all_timeframes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_timeframe_by_id", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_timeframe_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_timeframe_by_name", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_timeframe_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_all_tickers", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_all_tickers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.get_tickers_by_strategy", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.get_tickers_by_strategy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">strategy_id</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">operation_result</span><span class=\"o\">.</span><span class=\"n\">OperationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.ticker_service.TickerService.update_categories_commissions", "modulename": "app.backbone.services.ticker_service", "qualname": "TickerService.update_categories_commissions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">category_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils", "modulename": "app.backbone.services.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.services.utils.get_trade_df_from_db", "modulename": "app.backbone.services.utils", "qualname": "get_trade_df_from_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trades</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">Trade</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">performance_id</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils.trades_from_df_to_obj", "modulename": "app.backbone.services.utils", "qualname": "trades_from_df_to_obj", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trades</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">trade</span><span class=\"o\">.</span><span class=\"n\">Trade</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils.get_date_range", "modulename": "app.backbone.services.utils", "qualname": "get_date_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity_curves</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils.calculate_stability_ratio", "modulename": "app.backbone.services.utils", "qualname": "calculate_stability_ratio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity_curve</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils.max_drawdown", "modulename": "app.backbone.services.utils", "qualname": "max_drawdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity_curve</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.services.utils.calculate_sharpe_ratio", "modulename": "app.backbone.services.utils", "qualname": "calculate_sharpe_ratio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">returns</span>, </span><span class=\"param\"><span class=\"n\">risk_free_rate</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">trading_periods</span><span class=\"o\">=</span><span class=\"mi\">252</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils", "modulename": "app.backbone.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.general_purpose", "modulename": "app.backbone.utils.general_purpose", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.general_purpose.logger", "modulename": "app.backbone.utils.general_purpose", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger general_purpose (INFO)&gt;"}, {"fullname": "app.backbone.utils.general_purpose.load_function", "modulename": "app.backbone.utils.general_purpose", "qualname": "load_function", "kind": "function", "doc": "<p>Carga una funci\u00f3n desde un m\u00f3dulo, recargando el m\u00f3dulo si ya ha sido importado.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dotpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.screener_columns", "modulename": "app.backbone.utils.general_purpose", "qualname": "screener_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;industry&#x27;, &#x27;sector&#x27;, &#x27;trailingPE&#x27;, &#x27;forwardPE&#x27;, &#x27;pegRatio&#x27;, &#x27;trailingPegRatiobeta&#x27;, &#x27;totalDebt&#x27;, &#x27;quickRatio&#x27;, &#x27;currentRatio&#x27;, &#x27;totalRevenue&#x27;, &#x27;debtToEquity&#x27;, &#x27;revenuePerShare&#x27;, &#x27;returnOnAssets&#x27;, &#x27;returnOnEquity&#x27;, &#x27;freeCashflow&#x27;, &#x27;operatingCashflow&#x27;, &#x27;earningsGrowth&#x27;, &#x27;revenueGrowth&#x27;, &#x27;bid&#x27;, &#x27;ask&#x27;, &#x27;marketCap&#x27;, &#x27;twoHundredDayAverage&#x27;, &#x27;recommendationKey&#x27;, &#x27;numberOfAnalystOpinions&#x27;, &#x27;symbol&#x27;]"}, {"fullname": "app.backbone.utils.general_purpose.transformar_a_uno", "modulename": "app.backbone.utils.general_purpose", "qualname": "transformar_a_uno", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">numero</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.profile_function", "modulename": "app.backbone.utils.general_purpose", "qualname": "profile_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;code_performance_results.prof&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.in_streaming_context", "modulename": "app.backbone.utils.general_purpose", "qualname": "in_streaming_context", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ContextVar name=&#x27;in_streaming_context&#x27; default=False&gt;"}, {"fullname": "app.backbone.utils.general_purpose.streaming_endpoint", "modulename": "app.backbone.utils.general_purpose", "qualname": "streaming_endpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.build_live_trading_config", "modulename": "app.backbone.utils.general_purpose", "qualname": "build_live_trading_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">used_backtests</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">],</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">risk_fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.save_ticker_timeframes", "modulename": "app.backbone.utils.general_purpose", "qualname": "save_ticker_timeframes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.get_data", "modulename": "app.backbone.utils.get_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.get_data.get_data", "modulename": "app.backbone.utils.get_data", "qualname": "get_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ticker</span>, </span><span class=\"param\"><span class=\"n\">timeframe</span>, </span><span class=\"param\"><span class=\"n\">date_from</span>, </span><span class=\"param\"><span class=\"n\">date_to</span>, </span><span class=\"param\"><span class=\"n\">save_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.logger", "modulename": "app.backbone.utils.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.logger.get_logger", "modulename": "app.backbone.utils.logger", "qualname": "get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils", "modulename": "app.backbone.utils.montecarlo_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.montecarlo_utils.max_drawdown", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "max_drawdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity_curve</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils.montecarlo_statistics_simulation", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "montecarlo_statistics_simulation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trade_history</span>,</span><span class=\"param\">\t<span class=\"n\">equity_curve</span>,</span><span class=\"param\">\t<span class=\"n\">n_simulations</span>,</span><span class=\"param\">\t<span class=\"n\">initial_equity</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ruin</span><span class=\"o\">=</span><span class=\"mf\">0.85</span>,</span><span class=\"param\">\t<span class=\"n\">return_raw_curves</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils.monte_carlo_simulation_v2", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "monte_carlo_simulation_v2", "kind": "function", "doc": "<p>Simulaci\u00f3n de Monte Carlo para un sistema de trading con distribuci\u00f3n basada en probabilidades de trades.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame con columnas 'NetPnL' (Profit and Loss) y 'Type' ('long' o 'short').\n    equity_start (float): Valor inicial del equity.\n    num_simulations (int): N\u00famero de simulaciones a realizar.\n    threshold (float): Umbral para calcular el riesgo de ruina.</p>\n\n<p>Returns:\n    dict: Resultados estad\u00edsticos de las simulaciones, incluyendo drawdowns y retornos.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">equity_curve</span>,</span><span class=\"param\">\t<span class=\"n\">trade_history</span>,</span><span class=\"param\">\t<span class=\"n\">n_simulations</span>,</span><span class=\"param\">\t<span class=\"n\">initial_equity</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ruin</span>,</span><span class=\"param\">\t<span class=\"n\">return_raw_curves</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils", "modulename": "app.backbone.utils.wfo_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.wfo_utils.run_strategy", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_strategy", "kind": "function", "doc": "<p>Executes a backtest for a trading strategy with proper market metadata and commission handling.</p>\n\n<p>This function prepares the trading environment by:</p>\n\n<ul>\n<li>Converting prices to the correct denomination</li>\n<li>Loading symbol-specific trading constraints</li>\n<li>Setting up commission structures</li>\n<li>Selecting the appropriate backtest engine (fractional or standard)</li>\n<li>Running the strategy with all configured parameters</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Converts prices using ticker-specific conversion rates</li>\n<li>Retrieves scaled symbol metadata (lot sizes, pip values, etc.)</li>\n<li>Configures commission calculation based on ticker category:\n<ul>\n<li>Absolute commission per contract for &gt;=1</li>\n<li>Percentage commission for &lt;1</li>\n</ul></li>\n<li>Initializes either:\n<ul>\n<li>FractionalBacktest for fractional lot sizes</li>\n<li>Standard Backtest for whole lot sizes</li>\n</ul></li>\n<li>Executes the strategy with all parameters and constraints</li>\n<li>Returns performance statistics and the backtest engine instance</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>strategy: Trading strategy class/function to backtest</li>\n<li>ticker (Ticker): Financial instrument being traded</li>\n<li>timeframe (Timeframe): Time interval for the backtest</li>\n<li>prices (pd.DataFrame): OHLC price data</li>\n<li>initial_cash (float): Starting capital</li>\n<li>margin (float): Margin requirement (1/leverage)</li>\n<li>risk_free_rate (float, optional): Risk-free rate for Sharpe ratio. Defaults to 0.</li>\n<li>risk (float, optional): Risk percentage per trade. Defaults to None.</li>\n<li>opt_params (dict, optional): Optimization parameters. Defaults to None.</li>\n<li>metatrader_name (str, optional): MT5 symbol name. Defaults to None.</li>\n<li>timezone (str, optional): Timezone for trade timestamps. Defaults to None.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: Contains:\n<ul>\n<li>stats: Backtest performance statistics (pd.Series/dict)</li>\n<li>bt_train: The backtest engine instance (for further analysis)</li>\n</ul></li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Makes MT5 API call to get symbol info (via mt5.symbol_info)</li>\n<li>Modifies the input prices DataFrame with conversion rates</li>\n<li>May log warnings about lot size rounding in backtest engine</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Commission is applied both on entry and exit (hence /2 in calculation)</li>\n<li>Fractional backtesting is automatically used when minimum_fraction &lt; 1</li>\n<li>All trading constraints (lot sizes, steps) come from broker metadata</li>\n<li>The backtest engine handles spread as a fixed value from ticker.Spread</li>\n<li>Returned stats typically include Sharpe ratio, drawdown, trade counts etc.</li>\n<li>The bt_train object can be used to access trade-by-trade details</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk_free_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">opt_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metatrader_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.run_strategy_and_get_performances", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_strategy_and_get_performances", "kind": "function", "doc": "<p>Executes a trading strategy backtest and computes comprehensive performance metrics,\nwith optional visualization and reporting capabilities.</p>\n\n<p>This function extends the basic backtest by:</p>\n\n<ul>\n<li>Generating detailed performance statistics</li>\n<li>Calculating advanced metrics (stability ratio, Jarque-Bera, etc.)</li>\n<li>Producing visualizations and HTML reports</li>\n<li>Segmenting trade analytics (long/short, winning/losing trades)</li>\n<li>Computing risk-adjusted return metrics</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Runs the core strategy backtest using run_strategy()</li>\n<li>Generates equity curve plots if plot_path is specified</li>\n<li>Creates QuantStats performance reports if save_report=True</li>\n<li>Computes trade-level metrics:\n<ul>\n<li>Percentage returns relative to account equity</li>\n<li>Trade durations in days</li>\n<li>Win/loss segmentation</li>\n</ul></li>\n<li>Calculates advanced statistics:\n<ul>\n<li>Equity curve stability ratio (linear regression R\u00b2)</li>\n<li>Winrate binomial p-value</li>\n<li>Return distribution metrics (skew, kurtosis)</li>\n</ul></li>\n<li>Compiles results into three structured DataFrames:\n<ul>\n<li>Strategy-level performance metrics</li>\n<li>Detailed trade performance analytics</li>\n<li>Raw backtest statistics</li>\n</ul></li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>strategy: Trading strategy implementation</li>\n<li>ticker (Ticker): Financial instrument configuration</li>\n<li>timeframe (Timeframe): Backtesting time interval</li>\n<li>prices (pd.DataFrame): OHLC price data</li>\n<li>initial_cash (float): Starting capital</li>\n<li>risk_free_rate (float): Risk-free rate for Sharpe ratio</li>\n<li>margin (float): Margin requirement (1/leverage)</li>\n<li>risk (float, optional): Risk percentage per trade. Default=None.</li>\n<li>plot_path (str, optional): Directory to save plots. Default=None.</li>\n<li>file_name (str, optional): Base name for output files. Default=None.</li>\n<li>opt_params (dict, optional): Optimization parameters. Default=None.</li>\n<li>save_report (bool, optional): Whether to save QuantStats report. Default=False.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: Three DataFrames containing:\n<ul>\n<li>df_stats (pd.DataFrame): Strategy performance metrics (1 row)</li>\n<li>trade_performance (pd.DataFrame): Aggregated trade analytics (1 row)</li>\n<li>stats: Raw backtest statistics object</li>\n</ul></li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Creates plot files in plot_path if specified:\n<ul>\n<li>Interactive equity curve plot (.html)</li>\n<li>QuantStats performance report (if save_report=True)</li>\n</ul></li>\n<li>May create directories if they don't exist</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Trade returns are calculated as percentage of equity at entry</li>\n<li>Duration is converted to whole days for consistency</li>\n<li>Stability ratio measures equity curve linearity (higher = smoother)</li>\n<li>Winrate p-value tests if winrate could occur by chance</li>\n<li>Jarque-Bera tests return distribution normality</li>\n<li>All metrics are rounded to 3 decimal places</li>\n<li>Missing values are filled with 0 for robustness</li>\n<li>Separate metrics are provided for long/short positions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk_free_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">opt_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_report</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_conversion_rate", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_conversion_rate", "kind": "function", "doc": "<p>Calculates and applies currency conversion rates to price data for non-USD denominated instruments.</p>\n\n<p>This function handles currency conversion for Forex, Metals, Crypto, and Exotics by:</p>\n\n<ul>\n<li>Identifying if the instrument needs conversion (non-USD or inverse USD pairs)</li>\n<li>Finding the appropriate USD-based counterpart pair</li>\n<li>Applying direct or inverse rates as needed</li>\n<li>Merging conversion rates with the original price data</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Checks if the ticker category requires conversion (Forex, Metals, Crypto, Exotics)</li>\n<li>For non-USD pairs (e.g., EURGBP):\n<ul>\n<li>Attempts to find the USD-quoted version (GBPUSD)</li>\n<li>Falls back to inverse pair (USDGBP) if direct not available</li>\n<li>Calculates inverse rates when needed</li>\n</ul></li>\n<li>For USD-prefixed pairs (e.g., USDJPY):\n<ul>\n<li>Applies direct inverse (1/USDJPY)</li>\n</ul></li>\n<li>For non-convertible categories:\n<ul>\n<li>Sets conversion rate to 1 (no conversion)</li>\n</ul></li>\n<li>Merges conversion rates with original prices via forward-fill</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>prices (pd.DataFrame): OHLC price data with DateTime index</li>\n<li>ticker (Ticker): Instrument information including:\n<ul>\n<li>Name (e.g., 'EURGBP', 'USDJPY')</li>\n<li>Category (determines if conversion needed)</li>\n</ul></li>\n<li>timeframe (Timeframe): Used to fetch conversion rates at matching intervals</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>pd.DataFrame: Original prices with added 'ConversionRate' column:\n<ul>\n<li>1.0 for non-convertible instruments</li>\n<li>Direct rate for USD-prefixed pairs</li>\n<li>Cross-calculated rate for other Forex pairs</li>\n</ul></li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>Exception: When no valid conversion pair can be found for a non-USD instrument</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Conversion rates are forward-filled to handle mismatched timestamps</li>\n<li>Always targets USD conversion (assumes USD is account currency)</li>\n<li>For pairs like EURGBP, conversion goes through GBPUSD first</li>\n<li>Metals (XAUUSD) and Crypto (BTCUSD) follow same logic as Forex</li>\n<li>The function preserves all original price columns</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.optimization_function", "modulename": "app.backbone.utils.wfo_utils", "qualname": "optimization_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.plot_full_equity_curve", "modulename": "app.backbone.utils.wfo_utils", "qualname": "plot_full_equity_curve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_equity</span>, </span><span class=\"param\"><span class=\"n\">title</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_scaled_symbol_metadata", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_scaled_symbol_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">metatrader</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.calculate_binomial_p_value", "modulename": "app.backbone.utils.wfo_utils", "qualname": "calculate_binomial_p_value", "kind": "function", "doc": "<p>Calcula el p-valor para la hip\u00f3tesis nula de que la probabilidad de ganar es p (por defecto 0.5),\ndado que se observaron k trades ganadores en n trades.</p>\n\n<p>Retorna la probabilidad de obtener al menos k \u00e9xitos por azar (cola superior).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.max_consecutive_wins_and_losses", "modulename": "app.backbone.utils.wfo_utils", "qualname": "max_consecutive_wins_and_losses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_trades</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.walk_forward", "modulename": "app.backbone.utils.wfo_utils", "qualname": "walk_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">data_full</span>,</span><span class=\"param\">\t<span class=\"n\">warmup_bars</span>,</span><span class=\"param\">\t<span class=\"n\">lookback_bars</span><span class=\"o\">=</span><span class=\"mi\">40320</span>,</span><span class=\"param\">\t<span class=\"n\">validation_bars</span><span class=\"o\">=</span><span class=\"mi\">10080</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cash</span><span class=\"o\">=</span><span class=\"mi\">15000</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"o\">=</span><span class=\"mf\">0.0002</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mf\">0.03333333333333333</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_wfo_stats", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_wfo_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span>, </span><span class=\"param\"><span class=\"n\">warmup_bars</span>, </span><span class=\"param\"><span class=\"n\">ohcl_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.run_wfo", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_wfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">optim_func</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">lookback_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">warmup_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">validation_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\trisk: None = &lt;class &#x27;float&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();