window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "app.backbone", "modulename": "app.backbone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities", "modulename": "app.backbone.entities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.Base", "modulename": "app.backbone.entities", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.Base.__init__", "modulename": "app.backbone.entities", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "app.backbone.entities.Base.registry", "modulename": "app.backbone.entities", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.orm.decl_api.registry", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "app.backbone.entities.Base.metadata", "modulename": "app.backbone.entities", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData", "default_value": "MetaData()"}, {"fullname": "app.backbone.entities.bot", "modulename": "app.backbone.entities.bot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot", "modulename": "app.backbone.entities.bot", "qualname": "Bot", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot.Bot.__init__", "modulename": "app.backbone.entities.bot", "qualname": "Bot.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot.Bot.Id", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.StrategyId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.StrategyId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.TickerId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.TickerId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.TimeframeId", "modulename": "app.backbone.entities.bot", "qualname": "Bot.TimeframeId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Name", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Risk", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Risk", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Strategy", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Strategy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Ticker", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Ticker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.Timeframe", "modulename": "app.backbone.entities.bot", "qualname": "Bot.Timeframe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot.Bot.BotPerformance", "modulename": "app.backbone.entities.bot", "qualname": "Bot.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance", "modulename": "app.backbone.entities.bot_performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.__init__", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Id", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.BotId", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.BotId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.DateFrom", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.DateFrom", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.DateTo", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.DateTo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Method", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.StabilityRatio", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.StabilityRatio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Trades", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Trades", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Return", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Return", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Drawdown", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Drawdown", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.RreturnDd", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.RreturnDd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.StabilityWeightedRar", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.StabilityWeightedRar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.WinRate", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.WinRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Duration", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Favorite", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Favorite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.InitialCash", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.InitialCash", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.ExposureTime", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.ExposureTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.KellyCriterion", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.KellyCriterion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.WinratePValue", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.WinratePValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.SharpeRatio", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.SharpeRatio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.JarqueBeraStat", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.JarqueBeraStat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.JarqueBeraPValue", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.JarqueBeraPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Skew", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Skew", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Kurtosis", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Kurtosis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.Bot", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.BotTradePerformance", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.BotTradePerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.TradeHistory", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.TradeHistory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.MontecarloTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.MontecarloTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.LuckTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.LuckTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_performance.BotPerformance.RandomTest", "modulename": "app.backbone.entities.bot_performance", "qualname": "BotPerformance.RandomTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance", "modulename": "app.backbone.entities.bot_trade_performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.__init__", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.Id", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.BotPerformanceId", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanWinningReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanWinningReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdWinningReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdWinningReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanLosingReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanLosingReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdLosingReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdLosingReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanTradeDuration", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanTradeDuration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdTradeDuration", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdTradeDuration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongWinrate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongWinrate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinLongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinLongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinLongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinLongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseLongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseLongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseLongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseLongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortWinrate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortWinrate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LoseShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LoseShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.MeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.MeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.StdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.StdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ProfitFactor", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ProfitFactor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.WinRate", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.WinRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ConsecutiveWins", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ConsecutiveWins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ConsecutiveLosses", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ConsecutiveLosses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongCount", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortCount", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.LongStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.LongStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortMeanReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortMeanReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.ShortStdReturnPct", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.ShortStdReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.bot_trade_performance.BotTradePerformance.BotPerformance", "modulename": "app.backbone.entities.bot_trade_performance", "qualname": "BotTradePerformance.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category", "modulename": "app.backbone.entities.category", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category", "modulename": "app.backbone.entities.category", "qualname": "Category", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.category.Category.__init__", "modulename": "app.backbone.entities.category", "qualname": "Category.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.category.Category.Id", "modulename": "app.backbone.entities.category", "qualname": "Category.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Name", "modulename": "app.backbone.entities.category", "qualname": "Category.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Commission", "modulename": "app.backbone.entities.category", "qualname": "Category.Commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.category.Category.Tickers", "modulename": "app.backbone.entities.category", "qualname": "Category.Tickers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config", "modulename": "app.backbone.entities.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config", "modulename": "app.backbone.entities.config", "qualname": "Config", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.config.Config.__init__", "modulename": "app.backbone.entities.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.config.Config.Id", "modulename": "app.backbone.entities.config", "qualname": "Config.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config.Name", "modulename": "app.backbone.entities.config", "qualname": "Config.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.config.Config.Value", "modulename": "app.backbone.entities.config", "qualname": "Config.Value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test", "modulename": "app.backbone.entities.luck_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.__init__", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.Id", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.BotPerformanceId", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.LuckTestPerformanceId", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.LuckTestPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.TradesPercentToRemove", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.TradesPercentToRemove", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.BotPerformance", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.luck_test.LuckTest.LuckTestPerformance", "modulename": "app.backbone.entities.luck_test", "qualname": "LuckTest.LuckTestPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse", "modulename": "app.backbone.entities.metric_wharehouse", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.__init__", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Id", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.MontecarloTestId", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.MontecarloTestId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Method", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Metric", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.ColumnName", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.ColumnName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.Value", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.Value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.metric_wharehouse.MetricWharehouse.MontecarloTest", "modulename": "app.backbone.entities.metric_wharehouse", "qualname": "MetricWharehouse.MontecarloTest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test", "modulename": "app.backbone.entities.montecarlo_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.__init__", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Id", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.BotPerformanceId", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Simulations", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Simulations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.ThresholdRuin", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.ThresholdRuin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.BotPerformance", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.montecarlo_test.MontecarloTest.Metrics", "modulename": "app.backbone.entities.montecarlo_test", "qualname": "MontecarloTest.Metrics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test", "modulename": "app.backbone.entities.random_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.random_test.RandomTest.__init__", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.random_test.RandomTest.Id", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.BotPerformanceId", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.RandomTestPerformanceId", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.RandomTestPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.Iterations", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.Iterations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnDdZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnDdZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.ReturnZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.ReturnZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownPValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownPValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.DrawdownZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.DrawdownZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateMeanDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateMeanDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateStdDiff", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateStdDiff", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinratePValue", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinratePValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.WinrateZScore", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.WinrateZScore", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.BotPerformance", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.random_test.RandomTest.RandomTestPerformance", "modulename": "app.backbone.entities.random_test", "qualname": "RandomTest.RandomTestPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy", "modulename": "app.backbone.entities.strategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.strategy.Strategy.__init__", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.strategy.Strategy.Id", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Name", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Description", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Description", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.MetaTraderName", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.MetaTraderName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.strategy.Strategy.Bot", "modulename": "app.backbone.entities.strategy", "qualname": "Strategy.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker", "modulename": "app.backbone.entities.ticker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.ticker.Ticker.__init__", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.ticker.Ticker.Id", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.CategoryId", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.CategoryId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Name", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Spread", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Spread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Category", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Category", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.ticker.Ticker.Bot", "modulename": "app.backbone.entities.ticker", "qualname": "Ticker.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe", "modulename": "app.backbone.entities.timeframe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.__init__", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Id", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Name", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.MetaTraderNumber", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.MetaTraderNumber", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Selected", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Selected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.timeframe.Timeframe.Bot", "modulename": "app.backbone.entities.timeframe", "qualname": "Timeframe.Bot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade", "modulename": "app.backbone.entities.trade", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade", "modulename": "app.backbone.entities.trade", "qualname": "Trade", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.backbone.entities.trade.Trade.__init__", "modulename": "app.backbone.entities.trade", "qualname": "Trade.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.backbone.entities.trade.Trade.Id", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.BotPerformanceId", "modulename": "app.backbone.entities.trade", "qualname": "Trade.BotPerformanceId", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Size", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryBar", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryBar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitBar", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitBar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryPrice", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryPrice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitPrice", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitPrice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.SL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.SL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TP", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Tag", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Tag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.PnL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.PnL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.NetPnL", "modulename": "app.backbone.entities.trade", "qualname": "Trade.NetPnL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Commission", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Commission", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ReturnPct", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ReturnPct", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryTime", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitTime", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Duration", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.Equity", "modulename": "app.backbone.entities.trade", "qualname": "Trade.Equity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TopBest", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TopBest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.TopWorst", "modulename": "app.backbone.entities.trade", "qualname": "Trade.TopWorst", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.EntryConversionRate", "modulename": "app.backbone.entities.trade", "qualname": "Trade.EntryConversionRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.ExitConversionRate", "modulename": "app.backbone.entities.trade", "qualname": "Trade.ExitConversionRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.entities.trade.Trade.BotPerformance", "modulename": "app.backbone.entities.trade", "qualname": "Trade.BotPerformance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils", "modulename": "app.backbone.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.general_purpose", "modulename": "app.backbone.utils.general_purpose", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.general_purpose.logger", "modulename": "app.backbone.utils.general_purpose", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger general_purpose (INFO)&gt;"}, {"fullname": "app.backbone.utils.general_purpose.load_function", "modulename": "app.backbone.utils.general_purpose", "qualname": "load_function", "kind": "function", "doc": "<p>Carga una funci\u00f3n desde un m\u00f3dulo, recargando el m\u00f3dulo si ya ha sido importado.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dotpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.screener_columns", "modulename": "app.backbone.utils.general_purpose", "qualname": "screener_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;industry&#x27;, &#x27;sector&#x27;, &#x27;trailingPE&#x27;, &#x27;forwardPE&#x27;, &#x27;pegRatio&#x27;, &#x27;trailingPegRatiobeta&#x27;, &#x27;totalDebt&#x27;, &#x27;quickRatio&#x27;, &#x27;currentRatio&#x27;, &#x27;totalRevenue&#x27;, &#x27;debtToEquity&#x27;, &#x27;revenuePerShare&#x27;, &#x27;returnOnAssets&#x27;, &#x27;returnOnEquity&#x27;, &#x27;freeCashflow&#x27;, &#x27;operatingCashflow&#x27;, &#x27;earningsGrowth&#x27;, &#x27;revenueGrowth&#x27;, &#x27;bid&#x27;, &#x27;ask&#x27;, &#x27;marketCap&#x27;, &#x27;twoHundredDayAverage&#x27;, &#x27;recommendationKey&#x27;, &#x27;numberOfAnalystOpinions&#x27;, &#x27;symbol&#x27;]"}, {"fullname": "app.backbone.utils.general_purpose.transformar_a_uno", "modulename": "app.backbone.utils.general_purpose", "qualname": "transformar_a_uno", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">numero</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.profile_function", "modulename": "app.backbone.utils.general_purpose", "qualname": "profile_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;code_performance_results.prof&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.in_streaming_context", "modulename": "app.backbone.utils.general_purpose", "qualname": "in_streaming_context", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ContextVar name=&#x27;in_streaming_context&#x27; default=False&gt;"}, {"fullname": "app.backbone.utils.general_purpose.streaming_endpoint", "modulename": "app.backbone.utils.general_purpose", "qualname": "streaming_endpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.build_live_trading_config", "modulename": "app.backbone.utils.general_purpose", "qualname": "build_live_trading_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">used_backtests</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">],</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot_performance</span><span class=\"o\">.</span><span class=\"n\">BotPerformance</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">risk_fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.general_purpose.save_ticker_timeframes", "modulename": "app.backbone.utils.general_purpose", "qualname": "save_ticker_timeframes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.get_data", "modulename": "app.backbone.utils.get_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.get_data.get_data", "modulename": "app.backbone.utils.get_data", "qualname": "get_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ticker</span>, </span><span class=\"param\"><span class=\"n\">timeframe</span>, </span><span class=\"param\"><span class=\"n\">date_from</span>, </span><span class=\"param\"><span class=\"n\">date_to</span>, </span><span class=\"param\"><span class=\"n\">save_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.logger", "modulename": "app.backbone.utils.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.logger.get_logger", "modulename": "app.backbone.utils.logger", "qualname": "get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils", "modulename": "app.backbone.utils.montecarlo_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.montecarlo_utils.max_drawdown", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "max_drawdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">equity_curve</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils.montecarlo_statistics_simulation", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "montecarlo_statistics_simulation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trade_history</span>,</span><span class=\"param\">\t<span class=\"n\">equity_curve</span>,</span><span class=\"param\">\t<span class=\"n\">n_simulations</span>,</span><span class=\"param\">\t<span class=\"n\">initial_equity</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ruin</span><span class=\"o\">=</span><span class=\"mf\">0.85</span>,</span><span class=\"param\">\t<span class=\"n\">return_raw_curves</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.montecarlo_utils.monte_carlo_simulation_v2", "modulename": "app.backbone.utils.montecarlo_utils", "qualname": "monte_carlo_simulation_v2", "kind": "function", "doc": "<p>Simulaci\u00f3n de Monte Carlo para un sistema de trading con distribuci\u00f3n basada en probabilidades de trades.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame con columnas 'NetPnL' (Profit and Loss) y 'Type' ('long' o 'short').\n    equity_start (float): Valor inicial del equity.\n    num_simulations (int): N\u00famero de simulaciones a realizar.\n    threshold (float): Umbral para calcular el riesgo de ruina.</p>\n\n<p>Returns:\n    dict: Resultados estad\u00edsticos de las simulaciones, incluyendo drawdowns y retornos.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">equity_curve</span>,</span><span class=\"param\">\t<span class=\"n\">trade_history</span>,</span><span class=\"param\">\t<span class=\"n\">n_simulations</span>,</span><span class=\"param\">\t<span class=\"n\">initial_equity</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ruin</span>,</span><span class=\"param\">\t<span class=\"n\">return_raw_curves</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils", "modulename": "app.backbone.utils.wfo_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.backbone.utils.wfo_utils.run_strategy", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_strategy", "kind": "function", "doc": "<p>Executes a backtest for a trading strategy with proper market metadata and commission handling.</p>\n\n<p>This function prepares the trading environment by:</p>\n\n<ul>\n<li>Converting prices to the correct denomination</li>\n<li>Loading symbol-specific trading constraints</li>\n<li>Setting up commission structures</li>\n<li>Selecting the appropriate backtest engine (fractional or standard)</li>\n<li>Running the strategy with all configured parameters</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Converts prices using ticker-specific conversion rates</li>\n<li>Retrieves scaled symbol metadata (lot sizes, pip values, etc.)</li>\n<li>Configures commission calculation based on ticker category:\n<ul>\n<li>Absolute commission per contract for &gt;=1</li>\n<li>Percentage commission for &lt;1</li>\n</ul></li>\n<li>Initializes either:\n<ul>\n<li>FractionalBacktest for fractional lot sizes</li>\n<li>Standard Backtest for whole lot sizes</li>\n</ul></li>\n<li>Executes the strategy with all parameters and constraints</li>\n<li>Returns performance statistics and the backtest engine instance</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>strategy: Trading strategy class/function to backtest</li>\n<li>ticker (Ticker): Financial instrument being traded</li>\n<li>timeframe (Timeframe): Time interval for the backtest</li>\n<li>prices (pd.DataFrame): OHLC price data</li>\n<li>initial_cash (float): Starting capital</li>\n<li>margin (float): Margin requirement (1/leverage)</li>\n<li>risk_free_rate (float, optional): Risk-free rate for Sharpe ratio. Defaults to 0.</li>\n<li>risk (float, optional): Risk percentage per trade. Defaults to None.</li>\n<li>opt_params (dict, optional): Optimization parameters. Defaults to None.</li>\n<li>metatrader_name (str, optional): MT5 symbol name. Defaults to None.</li>\n<li>timezone (str, optional): Timezone for trade timestamps. Defaults to None.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: Contains:\n<ul>\n<li>stats: Backtest performance statistics (pd.Series/dict)</li>\n<li>bt_train: The backtest engine instance (for further analysis)</li>\n</ul></li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Makes MT5 API call to get symbol info (via mt5.symbol_info)</li>\n<li>Modifies the input prices DataFrame with conversion rates</li>\n<li>May log warnings about lot size rounding in backtest engine</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Commission is applied both on entry and exit (hence /2 in calculation)</li>\n<li>Fractional backtesting is automatically used when minimum_fraction &lt; 1</li>\n<li>All trading constraints (lot sizes, steps) come from broker metadata</li>\n<li>The backtest engine handles spread as a fixed value from ticker.Spread</li>\n<li>Returned stats typically include Sharpe ratio, drawdown, trade counts etc.</li>\n<li>The bt_train object can be used to access trade-by-trade details</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk_free_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">opt_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metatrader_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.run_strategy_and_get_performances", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_strategy_and_get_performances", "kind": "function", "doc": "<p>Executes a trading strategy backtest and computes comprehensive performance metrics,\nwith optional visualization and reporting capabilities.</p>\n\n<p>This function extends the basic backtest by:</p>\n\n<ul>\n<li>Generating detailed performance statistics</li>\n<li>Calculating advanced metrics (stability ratio, Jarque-Bera, etc.)</li>\n<li>Producing visualizations and HTML reports</li>\n<li>Segmenting trade analytics (long/short, winning/losing trades)</li>\n<li>Computing risk-adjusted return metrics</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Runs the core strategy backtest using run_strategy()</li>\n<li>Generates equity curve plots if plot_path is specified</li>\n<li>Creates QuantStats performance reports if save_report=True</li>\n<li>Computes trade-level metrics:\n<ul>\n<li>Percentage returns relative to account equity</li>\n<li>Trade durations in days</li>\n<li>Win/loss segmentation</li>\n</ul></li>\n<li>Calculates advanced statistics:\n<ul>\n<li>Equity curve stability ratio (linear regression R\u00b2)</li>\n<li>Winrate binomial p-value</li>\n<li>Return distribution metrics (skew, kurtosis)</li>\n</ul></li>\n<li>Compiles results into three structured DataFrames:\n<ul>\n<li>Strategy-level performance metrics</li>\n<li>Detailed trade performance analytics</li>\n<li>Raw backtest statistics</li>\n</ul></li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>strategy: Trading strategy implementation</li>\n<li>ticker (Ticker): Financial instrument configuration</li>\n<li>timeframe (Timeframe): Backtesting time interval</li>\n<li>prices (pd.DataFrame): OHLC price data</li>\n<li>initial_cash (float): Starting capital</li>\n<li>risk_free_rate (float): Risk-free rate for Sharpe ratio</li>\n<li>margin (float): Margin requirement (1/leverage)</li>\n<li>risk (float, optional): Risk percentage per trade. Default=None.</li>\n<li>plot_path (str, optional): Directory to save plots. Default=None.</li>\n<li>file_name (str, optional): Base name for output files. Default=None.</li>\n<li>opt_params (dict, optional): Optimization parameters. Default=None.</li>\n<li>save_report (bool, optional): Whether to save QuantStats report. Default=False.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: Three DataFrames containing:\n<ul>\n<li>df_stats (pd.DataFrame): Strategy performance metrics (1 row)</li>\n<li>trade_performance (pd.DataFrame): Aggregated trade analytics (1 row)</li>\n<li>stats: Raw backtest statistics object</li>\n</ul></li>\n</ul>\n\n<p>Side effects:</p>\n\n<ul>\n<li>Creates plot files in plot_path if specified:\n<ul>\n<li>Interactive equity curve plot (.html)</li>\n<li>QuantStats performance report (if save_report=True)</li>\n</ul></li>\n<li>May create directories if they don't exist</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Trade returns are calculated as percentage of equity at entry</li>\n<li>Duration is converted to whole days for consistency</li>\n<li>Stability ratio measures equity curve linearity (higher = smoother)</li>\n<li>Winrate p-value tests if winrate could occur by chance</li>\n<li>Jarque-Bera tests return distribution normality</li>\n<li>All metrics are rounded to 3 decimal places</li>\n<li>Missing values are filled with 0 for robustness</li>\n<li>Separate metrics are provided for long/short positions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk_free_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">risk</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">opt_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_report</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_conversion_rate", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_conversion_rate", "kind": "function", "doc": "<p>Calculates and applies currency conversion rates to price data for non-USD denominated instruments.</p>\n\n<p>This function handles currency conversion for Forex, Metals, Crypto, and Exotics by:</p>\n\n<ul>\n<li>Identifying if the instrument needs conversion (non-USD or inverse USD pairs)</li>\n<li>Finding the appropriate USD-based counterpart pair</li>\n<li>Applying direct or inverse rates as needed</li>\n<li>Merging conversion rates with the original price data</li>\n</ul>\n\n<p>Steps performed:</p>\n\n<ol>\n<li>Checks if the ticker category requires conversion (Forex, Metals, Crypto, Exotics)</li>\n<li>For non-USD pairs (e.g., EURGBP):\n<ul>\n<li>Attempts to find the USD-quoted version (GBPUSD)</li>\n<li>Falls back to inverse pair (USDGBP) if direct not available</li>\n<li>Calculates inverse rates when needed</li>\n</ul></li>\n<li>For USD-prefixed pairs (e.g., USDJPY):\n<ul>\n<li>Applies direct inverse (1/USDJPY)</li>\n</ul></li>\n<li>For non-convertible categories:\n<ul>\n<li>Sets conversion rate to 1 (no conversion)</li>\n</ul></li>\n<li>Merges conversion rates with original prices via forward-fill</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>prices (pd.DataFrame): OHLC price data with DateTime index</li>\n<li>ticker (Ticker): Instrument information including:\n<ul>\n<li>Name (e.g., 'EURGBP', 'USDJPY')</li>\n<li>Category (determines if conversion needed)</li>\n</ul></li>\n<li>timeframe (Timeframe): Used to fetch conversion rates at matching intervals</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>pd.DataFrame: Original prices with added 'ConversionRate' column:\n<ul>\n<li>1.0 for non-convertible instruments</li>\n<li>Direct rate for USD-prefixed pairs</li>\n<li>Cross-calculated rate for other Forex pairs</li>\n</ul></li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>Exception: When no valid conversion pair can be found for a non-USD instrument</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>Conversion rates are forward-filled to handle mismatched timestamps</li>\n<li>Always targets USD conversion (assumes USD is account currency)</li>\n<li>For pairs like EURGBP, conversion goes through GBPUSD first</li>\n<li>Metals (XAUUSD) and Crypto (BTCUSD) follow same logic as Forex</li>\n<li>The function preserves all original price columns</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">ticker</span><span class=\"o\">.</span><span class=\"n\">Ticker</span>,</span><span class=\"param\">\t<span class=\"n\">timeframe</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">backbone</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">timeframe</span><span class=\"o\">.</span><span class=\"n\">Timeframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.optimization_function", "modulename": "app.backbone.utils.wfo_utils", "qualname": "optimization_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.plot_full_equity_curve", "modulename": "app.backbone.utils.wfo_utils", "qualname": "plot_full_equity_curve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_equity</span>, </span><span class=\"param\"><span class=\"n\">title</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_scaled_symbol_metadata", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_scaled_symbol_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ticker</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">metatrader</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.calculate_binomial_p_value", "modulename": "app.backbone.utils.wfo_utils", "qualname": "calculate_binomial_p_value", "kind": "function", "doc": "<p>Calcula el p-valor para la hip\u00f3tesis nula de que la probabilidad de ganar es p (por defecto 0.5),\ndado que se observaron k trades ganadores en n trades.</p>\n\n<p>Retorna la probabilidad de obtener al menos k \u00e9xitos por azar (cola superior).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.max_consecutive_wins_and_losses", "modulename": "app.backbone.utils.wfo_utils", "qualname": "max_consecutive_wins_and_losses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_trades</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.walk_forward", "modulename": "app.backbone.utils.wfo_utils", "qualname": "walk_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">data_full</span>,</span><span class=\"param\">\t<span class=\"n\">warmup_bars</span>,</span><span class=\"param\">\t<span class=\"n\">lookback_bars</span><span class=\"o\">=</span><span class=\"mi\">40320</span>,</span><span class=\"param\">\t<span class=\"n\">validation_bars</span><span class=\"o\">=</span><span class=\"mi\">10080</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cash</span><span class=\"o\">=</span><span class=\"mi\">15000</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"o\">=</span><span class=\"mf\">0.0002</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mf\">0.03333333333333333</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.get_wfo_stats", "modulename": "app.backbone.utils.wfo_utils", "qualname": "get_wfo_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stats</span>, </span><span class=\"param\"><span class=\"n\">warmup_bars</span>, </span><span class=\"param\"><span class=\"n\">ohcl_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.backbone.utils.wfo_utils.run_wfo", "modulename": "app.backbone.utils.wfo_utils", "qualname": "run_wfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">strategy</span>,</span><span class=\"param\">\t<span class=\"n\">ticker</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span>,</span><span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">initial_cash</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">optim_func</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">lookback_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">warmup_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">validation_bars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\trisk: None = &lt;class &#x27;float&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();